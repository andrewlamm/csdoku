<!DOCTYPE html>
<html>
  <%- include('partials/helmet.ejs', {title: 'csdoku - infinite mode'}) %>
  <body>
    <div class="w-full absolute top-0 flex flex-row px-4 py-2 border-b border-white items-center justify-between text-white bg-gray-850">
      <div class="text-xl md:text-3xl text-center md:text-left">
        <a href="/" class="w-full h-full">CSDOKU</a> - infinite mode
      </div>
      <div class="flex flex-row items-center">
        <div class="text-base md:text-xl cursor-pointer mr-2 md:mr-8 text-center md:text-left">
          <a href="/" class="w-full h-full">back to original</a>
        </div>
        <div class="text-base md:text-xl cursor-pointer text-center md:text-left" onclick="openHowToPlay()">
          how to play
        </div>
      </div>
    </div>
    <div class="flex flex-col py-4 justify-center items-center absolute z-10 top-0 w-full h-screen hidden" id="how-to-popup-bg" onclick="closeHowToPlay()">
      <div class="flex flex-col max-h-full items-center justify-center p-4 w-80 md:w-96 relative z-20 bg-gray-400 rounded-xl" id="how-to-popup" onclick="event.stopPropagation()">
        <div class="w-full font-bold text-xl text-center">
          how to play - infinite mode
        </div>
        <div class="w-full my-4 overflow-y-auto">
          <ul class="list-disc list-inside">
            <li>this is a new mode, so there may be bugs! please report them to me on reddit at u/superandywaffle</li>
            <li>you can generate a new puzzle when you complete your current one (so if you want to skip a puzzle, you can just concede and genreate a new one)</li>
            <li>for each cell, pick a player that fits both the row and column criteria. you have <b>9</b> total guesses (rounds)</li>
            <li>for a team to be counted, the player must have played at least one match with them. so, the brazilian core that left 100T before playing a single match with them would not be accepted. additionally, teams where a player has coached on are <b>not</b> counted</li>
            <li>as long as a player has played on a team that matches with the name in the clue, it <b>will be</b> counted (so logos do not have to match up)</li>
            <li>unlike other immaculate grids that you may be used to, for a team & stat grid, the player <b>does not</b> have to achieve the stat on a certain team. typically, the stats are valid for their entire career (unless otherwise noted in the criteria)</li>
            <li>a player can only be picked once, and when it has been picked for a certain spot in the grid, it cannot be changed</li>
            <li>unfortunately, global scores <b>are not</b> saved in infinite mode. as such, uniqueness scores do not exist in this mode</li>
            <li>player data was last updated on <b><%= lastUpdated%></b></li>
            <li>send suggestions/bug reports on reddit at u/superandywaffle</li>
            <li>glhf!</li>
          </ul>
        </div>
        <div class="flex flex-row mt-2 w-full gap-4">
          <div class="rounded-lg bg-slate-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeHowToPlay()">
            close
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col py-4 justify-center items-center absolute z-10 top-0 w-full h-screen hidden" id="msg-bg" onclick="closeMessage()">
      <div class="flex flex-col max-h-full items-center justify-center p-4 w-80 md:w-96 relative z-20 bg-gray-400 rounded-xl" id="msg-popup" onclick="event.stopPropagation()">
        <div class="w-full font-bold text-xl text-center">
          announcement
        </div>
        <div class="w-full my-4 overflow-y-auto">
          hey! hopefully i didnt interrupt you in the middle of a game, but i just wanted to let you all know that i have fixed a bug causing user data to be deleted if too many infinite mode games were opened. unfortunately, this change will have <b>removed all data from your currently unfinished infinite mode games</b>. however, all infinite mode games <b>will now be saved</b>, and your data (hopefully) shouldnt get wiped if you open too many of them!!
        </div>
        <div class="w-full mb-4 overflow-y-auto">
          again, if you find any bugs, please report to me on reddit at u/superandywaffle or create a github issue <a href="https://github.com/andrewlamm/csgodoku/issues/new" target="_blank" rel="noopener noreferrer" class="text-blue-700">here</a>! thank you for playing!
        </div>
        <!-- <div class="w-full my-1 overflow-y-auto text-sm">
          <sup>1</sup>: For those wanting the technical details: all user data (including unfinished infinite mode games) were stored in a cookie. When this cookie got too large, things start to break. I have now moved all infinite mode game data to be stored in the local storage
        </div> -->
        <div class="flex flex-row mt-2 w-full gap-4">
          <div class="rounded-lg bg-slate-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeMessage()">
            close
          </div>
        </div>
      </div>
    </div>
    <div class="w-full h-screen flex flex-col justify-center items-center bg-gray-850" id="game-screen">
      <div class="w-full md:w-1/2 xl:w-1/4 flex flex-row items-center border border-slate-500 rounded-lg overflow-hidden font-bold text-white hidden" id="board-select-container">
        <div class="w-1/2 text-center border-r border-slate-500 py-2 transition-colors bg-gray-500 duration-500" id="own-board-select" onclick="toggleOwnBoard()">
          your board
        </div>
        <div class="w-1/2 text-center py-2 cursor-pointer transition-colors hover:bg-gray-400 duration-50" id="all-board-select" onclick="toggleAllBoard()">
          all possible picks
        </div>
      </div>
      <div class="flex flex-col md:flex-row justify-center">
        <div class="flex flex-col">
          <div class="flex flex-row">
            <div class="h-20 w-20 md:h-36 md:w-36"></div>
            <% for (let i = 0; i < 3; i++) { %>
              <%- displayClue(puzzle[i]) %>
            <% } %>
          </div>
          <div class="flex flex-row">
            <div class="flex flex-col">
              <% for (let i = 3; i < 6; i++) { %>
                <%- displayClue(puzzle[i]) %>
              <% } %>
            </div>
            <div class="grid grid-cols-3 rounded-2xl border overflow-hidden" id="user-board">
              <% for (let i = 0; i < 9; i++) { %>
                <div class="flex flex-col h-20 w-20 md:h-36 md:w-36 relative items-center justify-center border-white <%= getBorders(i) %> bg-slate-800 transition-colors" id="grid-spot-<%= i %>">
                  <img class="w-full h-full" id="grid-image-<%= i %>" onerror="if (this.src != 'images/player/placeholder.png') this.src = 'images/player/placeholder.png';">
                  <div class="w-full absolute bottom-0 px-2 bg-black font-bold text-white text-center text-sm md:text-base" id="grid-name-<%= i %>">
                  </div>
                </div>
              <% } %>
            </div>
            <div class="grid grid-cols-3 rounded-2xl border overflow-hidden hidden" id="stats-board">
              <% for (let i = 0; i < 9; i++) { %>
                <div class="flex flex-col h-20 w-20 md:h-36 md:w-36 relative items-center justify-center border-white <%= getBorders(i) %> cursor-pointer bg-slate-600 hover:bg-gray-700 transition-colors" onclick="openStatsPopup(<%= i %>)" id="stats-spot-<%= i %>">
                  <img class="w-full h-full" id="stats-image-<%= i %>" onerror="if (this.src != 'images/player/placeholder.png') this.src = 'images/player/placeholder.png';">
                  <div class="w-full absolute bottom-0 px-2 bg-black font-bold text-white text-center text-sm md:text-base" id="stats-name-<%= i %>">
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        </div>
        <div class="flex flex-col justify-center items-center text-base md:text-2xl md:ml-6 text-white pt-12 md:pt-36">
          <div>
            round<span id="rounds-plural"></span> left
          </div>
          <div class="text-xl md:text-6xl font-bold" id="rounds-left">

          </div>
          <div class="w-full flex justify-center mt-4 md:mt-8" id="show-recap-button">
            <div class="rounded-lg bg-blue-500 w-1/2 md:w-full text-center py-2 font-semibold cursor-pointer" onclick="openRecapPopup()">
              recap
            </div>
          </div>
          <div class="w-full flex justify-center mt-4 md:mt-4" id="show-concede-button">
            <div class="rounded-lg bg-red-500 w-1/2 md:w-full text-center py-2 font-semibold cursor-pointer" onclick="openConcede()">
              give up
            </div>
          </div>
          <div class="w-full flex flex-col justify-center mt-4 md:mt-4 hidden" id="confirm-concede-button">
            <div class="text-lg w-full text-center">are you sure?</div>
            <div class="w-full flex flex-row mt-2 gap-2 items-center justify-center">
              <div class="rounded-lg bg-red-500 md:w-full text-center px-4 py-2 font-semibold cursor-pointer" onclick="confirmConcede()">
                yes
              </div>
              <div class="rounded-lg bg-blue-500 md:w-full text-center px-4 py-2 font-semibold cursor-pointer" onclick="cancelConcede()">
                no
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full h-screen py-4 hidden" id="player-popup-bg" onclick="closePopup()">
      <div class="flex flex-col items-center justify-center p-4 w-80 md:w-96 z-10 bg-gray-400 rounded-xl max-h-full" id="player-popup" onclick="event.stopPropagation()">
        <div class="text-center mb-4" id="player-popup-text">
          enter a player who <span class="font-bold" id="player-popup-clue-1"></span> and <span class="font-bold" id="player-popup-clue-2"></span>
        </div>
        <div class="w-64 md:w-80">
          <input type="text" placeholder="enter a player" class="w-64 md:w-80 px-2 py-1.5 rounded-lg" oninput="updatePlayerList()" id="player-popup-input">
        </div>
        <div class="w-64 md:w-80 h-96 md:h-128 overflow-y-auto my-2" id="player-popup-list">
        </div>
        <div class="mt-4 w-64 md:w-80">
          <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closePopup()">
            close
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full h-screen py-4 hidden" id="recap-popup-bg" onclick="closeRecapPopup()">
      <div class="flex flex-col items-center justify-center p-4 w-80 md:w-96 z-10 bg-gray-400 rounded-xl max-h-full" id="recap-popup" onclick="event.stopPropagation()">
        <div class="w-full font-bold text-xl text-center">
          recap
        </div>
        <div class="w-full flex flex-row justify-center mt-2">
          <div class="flex flex-col items-center w-full">
            <div class="font-bold text-2xl" id="score-text"></div>
            <div class="font-semibold">your score</div>
          </div>
        </div>
        <div class="my-4 grid grid-cols-3 gap-4">
          <% for (let i = 0; i < 9; i++) { %>
            <div class="w-20 h-20 rounded-lg" id="recap-grid-<%= i %>">
            </div>
          <% } %>
        </div>
        <div class="w-full flex justify-center mb-2">
          <div class="rounded-lg bg-blue-400 px-4 text-center py-1 font-bold cursor-pointer" id="copy-score-button" onclick="copyScore()">
            copy score
          </div>
        </div>
        <div class="flex flex-row mt-2 w-full gap-4">
          <div class="w-1/2">
            <div class="rounded-lg bg-slate-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeRecapPopup()">
              close
            </div>
          </div>
          <div class="w-1/2">
            <a href="/infiniteSettings">
              <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer">
                new puzzle
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full h-screen py-4 hidden" id="stats-popup-bg" onclick="closeStatsPopup()">
      <div class="flex flex-col items-center justify-center p-4 w-80 md:w-96 z-10 bg-gray-400 rounded-xl max-h-full" id="stats-popup" onclick="event.stopPropagation()">
        <div class="text-center mb-4" id="stats-popup-text">
          players who <span class="font-bold" id="stats-popup-clue-1"></span> and <span class="font-bold" id="stats-popup-clue-2"></span>
        </div>
        <div class="w-64 md:w-80 h-96 md:h-128 overflow-y-auto my-2" id="stats-popup-list">
        </div>
        <div class="mt-4 w-64 md:w-80">
          <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeStatsPopup()">
            close
          </div>
        </div>
      </div>
    </div>
    <script>
      const puzzle = <%- JSON.stringify(puzzle) %>
      const puzzleID = "<%= puzzleID %>"
      const PUZZLES_GRID = [[0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5]]
      const NUMBER_OF_GUESSES = <%= NUMBER_OF_GUESSES %>
      let indexSelected = undefined
      let currListener = undefined

      let possiblePlayers = <%- JSON.stringify(possiblePlayers) %>
      const possiblePlayersSet = [new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set()]
      for (let i = 0; i < 9; i++) {
        for (let j = 0; j < possiblePlayers[i].length; j++) {
          possiblePlayersSet[i].add(possiblePlayers[i][j])
        }
      }

      let copyString = ""

      let popupShowing = false
      function convertClueToText(clue) {
        // whats a switch statement omegadance
        if (clue[0] === 'team') {
          return `has played for ${clue[1].substring(clue[1].indexOf('/') + 1)}`
        }
        else if (clue[0] === 'country') {
          return `is from ${clue[1]}`
        }
        else if (clue[0] === 'age') {
          return `is older than ${clue[1]} years old`
        }
        else if (clue[0] === 'rating2') {
          return `has a career rating 2.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'rating1') {
          return `has a career rating 1.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'KDDiff') {
          return `has a career K/D difference of over ${clue[1]}`
        }
        else if (clue[0] === 'maps') {
          return `has played over ${clue[1]} maps in their career`
        }
        else if (clue[0] === 'rounds') {
          return `has played over ${clue[1]} rounds in their career`
        }
        else if (clue[0] === 'KDRatio') {
          return `has a career K/D ratio of over ${clue[1]}`
        }
        else if (clue[0] === 'HSRatio') {
          return `has a career headshot percentage of over ${clue[1]}%`
        }
        else if (clue[0] === 'ratingTop20') {
          return `has a rating 2.0 of over ${clue[1]} against top 20 teams in their career`
        }
        else if (clue[0] === 'clutchesTotal') {
          return `has over ${clue[1]} clutches in their career`
        }
        else if (clue[0] === 'majorsWon') {
          return `has won over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'majorsPlayed') {
          return `has played in over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'LANsWon') {
          return `has won over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'LANsPlayed') {
          return `has played in over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'top20s') {
          return `has been in the top 20 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'top10s') {
          return `has been in the top 10 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'ratingYear') {
          return `had over a rating 1.0 of ${clue[1][1]} in ${clue[1][0]}`
        }
        else if (clue[0] === 'topPlacement') {
          return `has been a top ${clue[1]} player in at least one year`
        }
        else {
          return `has over ${clue[1]} ${clue[0]} in their career`
        }
      }

      function formatPercentage(percent) {
        if (percent < 10) {
          return `${percent.toFixed(2)}%`
        }
        else if (percent < 100) {
          return `${percent.toFixed(1)}%`
        }
        else {
          return `${percent.toFixed(0)}%`
        }
      }

      function openHowToPlay() {
        document.getElementById('how-to-popup-bg').classList.remove('hidden')
      }

      function closeHowToPlay() {
        document.getElementById('how-to-popup-bg').classList.add('hidden')
        localStorage.setItem('infiniteHowToPlay', 'true')
        localStorage.setItem('infiniteSept03Message', 'true')
      }

      function closeMessage() {
        document.getElementById('msg-bg').classList.add('hidden')
        localStorage.setItem('infiniteSept03Message', 'true')
      }

      // announcements
      if (localStorage.getItem('infiniteHowToPlay') !== 'true') {
        openHowToPlay()
      }
      else if (localStorage.getItem('infiniteSept03Message') !== 'true') {
        document.getElementById('msg-bg').classList.remove('hidden')
      }

      function toggleAllBoard() {
        document.getElementById('user-board').classList.add('hidden')
        document.getElementById('stats-board').classList.remove('hidden')

        document.getElementById('own-board-select').classList.remove('bg-gray-500')
        document.getElementById('own-board-select').classList.add('hover:bg-gray-400', 'cursor-pointer')
        document.getElementById('all-board-select').classList.add('bg-gray-500')
        document.getElementById('all-board-select').classList.remove('hover:bg-gray-400', 'cursor-pointer')
      }

      function toggleOwnBoard() {
        document.getElementById('user-board').classList.remove('hidden')
        document.getElementById('stats-board').classList.add('hidden')

        document.getElementById('own-board-select').classList.add('bg-gray-500')
        document.getElementById('own-board-select').classList.remove('hover:bg-gray-400', 'cursor-pointer')
        document.getElementById('all-board-select').classList.remove('bg-gray-500')
        document.getElementById('all-board-select').classList.add('hover:bg-gray-400', 'cursor-pointer')
      }

      function closePopup() {
        document.getElementById('player-popup-bg').classList.add('hidden')
        document.getElementById('player-popup-input').value = ''
        updatePlayerList()

        indexSelected = undefined
      }
      function openPopup(ind) {
        document.getElementById('player-popup-clue-1').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][0]])
        document.getElementById('player-popup-clue-2').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][1]])

        popupShowing = true
        document.getElementById('player-popup-bg').classList.remove('hidden')

        document.getElementById('player-popup-input').focus()

        indexSelected = ind
      }

      function openConcede() {
        document.getElementById('show-concede-button').classList.add('hidden')
        document.getElementById('confirm-concede-button').classList.remove('hidden')
      }

      async function confirmConcede() {
        const res = concedeFunction()

        // console.log(res)

        gameOverSequence(res)
      }

      function cancelConcede() {
        document.getElementById('show-concede-button').classList.remove('hidden')
        document.getElementById('confirm-concede-button').classList.add('hidden')
      }

      function openRecapPopup() {
        document.getElementById('recap-popup-bg').classList.remove('hidden')
      }
      function closeRecapPopup() {
        document.getElementById('recap-popup-bg').classList.add('hidden')
      }

      async function copyScore() {
        if (copyString === "") {
          // set copy string
          const score = document.getElementById('score-text').innerHTML.charAt(0)

          copyString += `CSDOKU infinite mode - ${score}/9\n\n`

          for (let i = 0; i < 9; i++) {
            if (i % 3 === 0) {
              copyString += '\n'
            }

            copyString += `${document.getElementById(`recap-grid-${i}`).classList.contains('bg-green-500') ? '🟩' : '⬜'}`
          }

          copyString += '\n\n'
          copyString += `https://csgodoku.onrender.com/infinite?id=${puzzleID}`
        }

        await navigator.clipboard.writeText(copyString)

        // change button text, add a listener to change it back
        document.getElementById('copy-score-button').innerHTML = 'copied!'
        document.getElementById('copy-score-button').onclick = undefined
        document.getElementById('copy-score-button').classList.remove('cursor-pointer')

        setTimeout(() => {
          document.getElementById('copy-score-button').innerHTML = 'copy score'
          document.getElementById('copy-score-button').onclick = copyScore
          document.getElementById('copy-score-button').classList.add('cursor-pointer')
        }, 2000)
      }

      function setPossiblePlayers() {
        for (let i = 0; i < 9; i++) {
          const indPossiblePlayers = possiblePlayers[i]
          const randomPlayerID = indPossiblePlayers[Math.floor(Math.random() * indPossiblePlayers.length)]

          document.getElementById(`stats-image-${i}`).src = `images/player/${randomPlayerID}.png`
          document.getElementById(`stats-image-${i}`).alt = players[randomPlayerID].name

          document.getElementById(`stats-name-${i}`).innerHTML = players[randomPlayerID].name
        }
      }

      function gameOverSequence(res) {
        document.getElementById('score-text').innerHTML = `${res.score} / 9`

        for (let i = 0; i < 9; i++) {
          document.getElementById(`grid-spot-${i}`).onclick = undefined
          document.getElementById(`grid-spot-${i}`).classList.remove('cursor-pointer', 'hover:bg-slate-600')
        }

        setPossiblePlayers()

        // show everything
        closePopup()
        document.getElementById('show-recap-button').classList.remove('hidden')
        openRecapPopup()

        cancelConcede()
        document.getElementById('show-concede-button').classList.add('hidden')

        document.getElementById('board-select-container').classList.remove('hidden')
      }

      async function submitGuess(playerID) {
        if (indexSelected === undefined) {
          return
        }

        const ind = indexSelected

        const player = players[playerID]
        if (player === undefined) {
          return
        }

        if (player.guessed[ind]) {
          return
        }

        player.guessed[ind] = true

        const res = checkGuess(playerID, ind)

        document.getElementById('rounds-left').innerHTML = res.guessesLeft
        if (res.guessesLeft === 1) {
          document.getElementById('rounds-plural').innerHTML = ''
        }
        else {
          document.getElementById('rounds-plural').innerHTML = 's'
        }

        if (res.guessStatus === -1) {
          // error, do nothing
          return
        }
        else if (res.guessStatus === 0) {
          // incorrect
          document.getElementById(`player-popup-element-${player.id}`).classList.add('line-through', 'opacity-50')

          document.getElementById(`player-popup-select-${player.id}`).classList.remove('bg-blue-400', 'cursor-pointer')
          document.getElementById(`player-popup-select-${player.id}`).classList.add('bg-red-400')
          document.getElementById(`player-popup-select-${player.id}`).innerHTML = 'incorrect'
        }
        else if (res.guessStatus === 1) {
          // correct
          player.correct = true

          document.getElementById(`grid-spot-${ind}`).classList.remove('bg-slate-800', 'hover:bg-slate-600', 'cursor-pointer')
          document.getElementById(`grid-spot-${ind}`).classList.add('bg-slate-600')
          document.getElementById(`grid-spot-${ind}`).onclick = undefined

          document.getElementById(`grid-image-${ind}`).src = `/images/player/${player.id}.png`
          document.getElementById(`grid-name-${ind}`).innerHTML = player.name

          document.getElementById(`recap-grid-${ind}`).classList.add('bg-green-500')
          document.getElementById(`recap-grid-${ind}`).classList.remove('bg-gray-500')

          closePopup()
        }
        else {
          // ???
          return
        }

        if (res.guessesLeft === 0) {
          // game over sequence
          gameOverSequence(res)
        }
      }

      function updatePlayerList() {
        const ind = indexSelected

        const val = document.getElementById('player-popup-input').value.toLowerCase()
        document.getElementById('player-popup-list').innerHTML = ''

        if (val.length === 0) {
          return
        }
        else {
          filtered_players = Object.values(players).filter(player => {
            return player.name.toLowerCase().includes(val) || player.fullName.toLowerCase().includes(val)
          })

          filtered_players.map(player => {
            playerNameElement = document.createElement('div')
            playerNameElement.innerHTML = player.name
            playerNameElement.classList.add('font-bold', 'text-lg')

            playerFullNameElement = document.createElement('div')
            playerFullNameElement.innerHTML = player.fullName
            playerFullNameElement.classList.add('text-sm')

            playerElement = document.createElement('div')
            playerElement.classList.add('flex', 'flex-col', 'justify-center', 'flex-grow')
            if (player.guessed[ind] && !player.correct) {
              playerElement.classList.add('line-through', 'opacity-50')
            }
            playerElement.appendChild(playerNameElement)
            playerElement.appendChild(playerFullNameElement)
            playerElement.id = `player-popup-element-${player.id}`

            selectElement = document.createElement('div')
            if (player.correct) {
              selectElement.classList.add('rounded-lg', 'bg-green-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'picked'
            }
            else if (player.guessed[ind]) {
              selectElement.classList.add('rounded-lg', 'bg-red-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'incorrect'
            }
            else {
              selectElement.classList.add('rounded-lg', 'bg-blue-400', 'px-2', 'py-1', 'cursor-pointer', 'mr-2')
              selectElement.innerHTML = 'select'
              selectElement.onclick = function() {
                submitGuess(player.id)
              }
            }
            selectElement.id = `player-popup-select-${player.id}`

            playerElementWrapper = document.createElement('div')
            playerElementWrapper.classList.add('flex', 'flex-row', 'items-center', 'w-full', 'my-4')
            playerElementWrapper.appendChild(playerElement)
            playerElementWrapper.appendChild(selectElement)

            document.getElementById('player-popup-list').appendChild(playerElementWrapper)
          })

          return
        }
      }

      function openStatsPopup(ind) {
        document.getElementById('stats-popup-clue-1').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][0]]).replaceAll(' is ', ' are ').replaceAll(' has ', ' have ')
        document.getElementById('stats-popup-clue-2').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][1]]).replaceAll(' is ', ' are ').replaceAll(' has ', ' have ')

        document.getElementById('stats-popup-bg').classList.remove('hidden')

        document.getElementById('stats-popup-list').innerHTML = ''

        for (let i = 0; i < possiblePlayers[ind].length; i++) {
          const player = players[possiblePlayers[ind][i]]

          playerNameElement = document.createElement('div')
          playerNameElement.innerHTML = player.name
          playerNameElement.classList.add('font-bold', 'text-lg')

          playerFullNameElement = document.createElement('div')
          playerFullNameElement.innerHTML = player.fullName
          playerFullNameElement.classList.add('text-sm')

          playerElement = document.createElement('div')
          playerElement.classList.add('flex', 'flex-col', 'justify-center', 'flex-grow')
          playerElement.appendChild(playerNameElement)
          playerElement.appendChild(playerFullNameElement)

          playerElementWrapper = document.createElement('div')
          playerElementWrapper.classList.add('flex', 'flex-row', 'items-center', 'w-full', 'my-4')
          playerElementWrapper.appendChild(playerElement)

          document.getElementById('stats-popup-list').appendChild(playerElementWrapper)
        }
      }

      function closeStatsPopup() {
        document.getElementById('stats-popup-bg').classList.add('hidden')

        document.getElementById('stats-popup-list').innerHTML = ''
      }

      const players = <%- JSON.stringify(players) %>
      for (const id in players) {
        players[id].guessed = [false, false, false, false, false, false, false, false, false]
        players[id].correct = false
      }

      /* Infinite Mode Functions */
      if (localStorage.getItem(puzzleID) === null) {
        const data = {
          puzzleID: puzzleID,
          puzzle: puzzle,
          guessesLeft: NUMBER_OF_GUESSES,
          gameStatus: 0,
          board: [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined],
          guesses: [[], [], [], [], [], [], [], [], []],
        }
        localStorage.setItem(puzzleID, JSON.stringify(data))
      }

      const userData = JSON.parse(localStorage.getItem(puzzleID))
      if (userData.gameStatus !== 0) {
        document.getElementById('board-select-container').classList.remove('hidden')
      }

      for (let i = 0; i < 9; i++) {
        if (userData.board[i]) {
          document.getElementById(`grid-image-${i}`).src = `/images/player/${players[userData.board[i]].id}.png`
          document.getElementById(`grid-name-${i}`).innerHTML = players[userData.board[i]].name
          document.getElementById(`grid-spot-${i}`).classList.remove('bg-slate-800')
          document.getElementById(`grid-spot-${i}`).classList.add('bg-slate-600')

          document.getElementById(`recap-grid-${i}`).classList.add('bg-green-500')
        }
        else {
          document.getElementById(`recap-grid-${i}`).classList.add('bg-gray-500')

          if (userData.gameStatus === 0) {
            document.getElementById(`grid-spot-${i}`).classList.add('cursor-pointer', 'hover:bg-slate-600')
            document.getElementById(`grid-spot-${i}`).onclick = function() {
              openPopup(i)
            }
          }
        }
      }

      if (userData.gueesesLeft !== 1) {
        document.getElementById('rounds-plural').innerHTML = 's'
      }
      else {
        document.getElementById('rounds-plural').innerHTML = ''
      }

      document.getElementById('rounds-left').innerHTML = userData.guessesLeft

      if (userData.guessesLeft > 0) {
        document.getElementById('show-recap-button').classList.add('hidden')
      }
      if (userData.guessesLeft === 0) {
        document.getElementById('show-concede-button').classList.add('hidden')
      }

      document.getElementById('score-text').innerHTML = `${userData.board.filter(x => x !== undefined && x !== null).length} / 9`

      function checkGuess(playerID, index) {
        try {
          const ind = parseInt(index)
          const playerGuess = parseInt(playerID)

          const gameData = JSON.parse(localStorage.getItem(puzzleID))
          gameData.guesses[ind].push(playerGuess)
          gameData.guessesLeft -= 1

          if (possiblePlayersSet[ind].has(playerGuess)) {
            gameData.board[ind] = playerGuess
          }

          console.log(gameData)

          if (gameData.guessesLeft <= 0) {
            const score = gameData.board.filter(x => x !== undefined && x !== null).length
            gameData.gameStatus = score === 9 ? 1 : -1

            localStorage.setItem(puzzleID, JSON.stringify(gameData))

            const returnObj = {
              gameStatus: gameData.gameStatus,
              guessStatus: possiblePlayersSet[ind].has(playerGuess) ? 1 : 0,
              guessesLeft: gameData.guessesLeft,
              score: score,
            }
            return returnObj
          }
          else {
            localStorage.setItem(puzzleID, JSON.stringify(gameData))

            const returnObj = {
              gameStatus: 0,
              guessStatus: possiblePlayersSet[ind].has(playerGuess) ? 1 : 0,
              guessesLeft: gameData.guessesLeft,
            }
            return returnObj
          }
        }
        catch (e) {
          console.log(e)
          const returnObj = {
            guessStatus: -1,
            guessesLeft: 0,
            gameStatus: 0,
          }
          return returnObj
        }
      }

      function concedeFunction() {
        try {
          const gameData = JSON.parse(localStorage.getItem(puzzleID))

          gameData.guessesLeft = 0
          const score = gameData.board.filter(x => x !== undefined && x !== null).length
          gameData.gameStatus = -1

          localStorage.setItem(puzzleID, JSON.stringify(gameData))

          const returnObj = {
            gameStatus: -1,
            guessesLeft: 0,
            score: score,
          }
          return returnObj
        }
        catch (e) {
          const returnObj = {
            gameStatus: -1,
            guessesLeft: 0,
            score: 0,
          }
          return returnObj
        }
      }

      if (userData.guessesLeft <= 0) {
        setPossiblePlayers()

        openRecapPopup()
      }

      for (let i = 0; i < 9; i++) {
        for (let j = 0; j < userData.guesses[i].length; j++) {
          players[userData.guesses[i][j]].guessed[i] = true
        }
      }

      for (let i = 0; i < userData.board.length; i++) {
        if (userData.board[i] !== undefined && userData.board[i] !== null) {
          players[userData.board[i]].correct = true
        }
      }
    </script>
  </body>
</html>
