<!DOCTYPE html>
<html>
  <%- include('partials/helmet.ejs', {title: 'csgodoku'}) %>
  <body>
    <div class="w-full absolute top-0 flex flex-row px-4 py-2 border-b border-white items-center justify-between text-white">
      <div class="text-xl md:text-3xl cursor-pointer" onclick="location.reload()">
        CSGODOKU
      </div>
      <div class="text-base md:text-xl cursor-pointer" onclick="openHowToPlay()">
        how to play
      </div>
    </div>
    <div class="flex flex-col py-4 justify-center items-center absolute z-10 top-0 w-full h-screen hidden" id="how-to-popup-bg" onclick="closeHowToPlay()">
      <div class="flex flex-col max-h-full items-center justify-center p-4 w-80 md:w-96 relative z-20 bg-gray-400 rounded-xl" id="how-to-popup" onclick="event.stopPropagation()">
        <div class="w-full font-bold text-xl text-center">
          how to play
        </div>
        <div class="w-full my-4 overflow-y-auto">
          <ul class="list-disc list-inside">
            <li>for each cell, pick a player that fits both the row and column criteria. you have <b>9</b> total guesses (rounds)</li>
            <li>for a team to be counted, the player must have played at least one match with them. so, the brazilian core that left 100T before playing a single match with them would not be accepted. additionally, coaches are <b>not</b> counted. NOTE: standins do not work right now!</li>
            <li>unlike other immaculate grids that you may be used to, for a team & stat grid, the player <b>does not</b> have to achieve the stat on a certain team. typically, the stats are valid for their entire career (unless otherwise noted in the criteria)</li>
            <li>a player can only be picked once, and when it has been picked for a certain spot in the grid, it cannot be changed</li>
            <li>uniqueness scores are calculated by summing up <span class="font-mono">(100 - percentage of games with chosen player)</span> for each 9 spots in the grid. an empty grid slot is worth 0 points. the higher the uniqueness score, the rarer the board is</li>
            <li>new games everyday at 10 PM EST</li>
            <li>player data was last updated on <b><%= lastUpdated%></b></li>
            <li>send suggestions/bug reports on reddit at u/superandywaffle</li>
            <li>glhf!</li>
          </ul>
        </div>
        <div class="flex flex-row mt-2 w-full gap-4">
          <div class="rounded-lg bg-slate-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeHowToPlay()">
            close
          </div>
        </div>
      </div>
    </div>
    <div class="w-full h-screen flex flex-col justify-center items-center bg-gray-850" id="game-screen">
      <div class="flex flex-col md:flex-row justify-center">
        <div class="flex flex-col">
          <div class="flex flex-row">
            <div class="h-20 w-20 md:h-36 md:w-36"></div>
            <% for (let i = 0; i < 3; i++) { %>
              <%- displayClue(puzzle[i]) %>
            <% } %>
          </div>
          <div class="flex flex-row">
            <div class="flex flex-col">
              <% for (let i = 3; i < 6; i++) { %>
                <%- displayClue(puzzle[i]) %>
              <% } %>
            </div>
            <div class="grid grid-cols-3 rounded-2xl border overflow-hidden" id="user-board">
              <% for (let i = 0; i < 9; i++) { %>
                <% if (currGame.board[i]) { %>
                  <div class="flex flex-col h-20 w-20 md:h-36 md:w-36 relative items-center justify-center border-white <%= getBorders(i) %> bg-slate-600 transition-colors" id="grid-spot-<%= i %>">
                    <img class="w-full h-full" src="/images/player/<%= players[currGame.board[i]].id %>.png">
                    <div class="w-full absolute bottom-0 px-1 md:px-2 bg-black font-bold text-white text-center text-sm md:text-base">
                      <%= players[currGame.board[i]].name %>
                    </div>
                    <div class="absolute top-0 right-0 px-1 md:px-2 bg-black font-bold text-white" id="grid-percentage-<%= i %>">
                      <%= formatPercentage(currGame.boardPercentages[i] * 100) %>
                    </div>
                  </div>
                <% } else { %>
                  <div class="flex flex-col h-20 w-20 md:h-36 md:w-36 relative items-center justify-center border-white <%= getBorders(i) %> <% if (currGame.gameStatus === 0) { %> cursor-pointer hover:bg-slate-600 <% } %> bg-slate-800 transition-colors" <% if (currGame.gameStatus === 0) { %>onclick="openPopup(<%= i %>)"<% } %> id="grid-spot-<%= i %>">
                    <img class="w-full h-full" id="grid-image-<%= i %>">
                    <div class="w-full absolute bottom-0 px-2 bg-black font-bold text-white text-center text-sm md:text-base" id="grid-name-<%= i %>">
                    </div>
                    <div class="absolute top-0 right-0 px-2 bg-black font-bold text-white" id="grid-percentage-<%= i %>">
                    </div>
                  </div>
                <% } %>
              <% } %>
            </div>
          </div>
        </div>
        <div class="flex flex-col justify-center items-center text-base md:text-2xl md:ml-6 text-white pt-12 md:pt-36">
          <div>
            round<span id="rounds-plural"><% if (currGame.guessesLeft !== 1) { %>s<% } %></span> left
          </div>
          <div class="text-xl md:text-6xl font-bold" id="rounds-left">
            <%= currGame.guessesLeft %>
          </div>
          <div class="w-full flex justify-center mt-4 md:mt-8 <% if (currGame.guessesLeft > 0) { %> hidden <% } %>" id="show-recap-button">
            <div class="rounded-lg bg-blue-500 w-1/2 md:w-full text-center py-2 font-semibold cursor-pointer" onclick="openRecapPopup()">
              recap
            </div>
          </div>
          <div class="w-full flex justify-center mt-4 md:mt-4 <% if (currGame.guessesLeft === 0) { %> hidden <% } %>" id="show-concede-button">
            <div class="rounded-lg bg-red-500 w-1/2 md:w-full text-center py-2 font-semibold cursor-pointer" onclick="openConcede()">
              give up
            </div>
          </div>
          <div class="w-full flex flex-col justify-center mt-4 md:mt-4 hidden" id="confirm-concede-button">
            <div class="text-lg w-full text-center">are you sure?</div>
            <div class="w-full flex flex-row mt-2 gap-2 items-center justify-center">
              <div class="rounded-lg bg-red-500 md:w-full text-center px-4 py-2 font-semibold cursor-pointer" onclick="confirmConcede()">
                yes
              </div>
              <div class="rounded-lg bg-blue-500 md:w-full text-center px-4 py-2 font-semibold cursor-pointer" onclick="cancelConcede()">
                no
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full h-screen py-4 hidden" id="player-popup-bg" onclick="closePopup()">
      <div class="flex flex-col items-center justify-center p-4 w-80 md:w-96 z-10 bg-gray-400 rounded-xl max-h-full" id="player-popup" onclick="event.stopPropagation()">
        <div class="text-center mb-4" id="player-popup-text">
          enter a player who <span class="font-bold" id="player-popup-clue-1"></span> and <span class="font-bold" id="player-popup-clue-2"></span>
        </div>
        <div class="w-64 md:w-80">
          <input type="text" placeholder="enter a player" class="w-64 md:w-80 px-2 py-1.5 rounded-lg" oninput="updatePlayerList()" id="player-popup-input">
        </div>
        <div class="w-64 md:w-80 h-96 md:h-128 overflow-y-auto my-2" id="player-popup-list">
        </div>
        <div class="mt-4 w-64 md:w-80">
          <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closePopup()">
            close
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full h-screen py-4 hidden" id="recap-popup-bg" onclick="closeRecapPopup()">
      <div class="flex flex-col items-center justify-center p-4 w-80 md:w-96 z-10 bg-gray-400 rounded-xl max-h-full" id="recap-popup" onclick="event.stopPropagation()">
        <div class="w-full font-bold text-xl text-center">
          recap
        </div>
        <div class="w-full flex flex-row justify-center mt-2">
          <div class="flex flex-col items-center w-1/2 border-r-2 border-slate-700">
            <div class="font-bold text-2xl" id="score-text"><%= currGame.userScore[0] %> / 9</div>
            <div class="font-semibold">your score</div>
          </div>
          <div class="flex flex-col items-center w-1/2">
            <div class="font-bold text-2xl" id="uniqueness-text"><%= currGame.userScore[1] %></div>
            <div class="font-semibold">uniqueness</div>
          </div>
        </div>
        <div class="my-4 grid grid-cols-3 gap-4">
          <% for (let i = 0; i < 9; i++) { %>
            <div class="w-20 h-20 rounded-lg <% if (currGame.board[i]) { %> bg-green-500 <% } else { %> bg-gray-500 <% } %>" id="recap-grid-<%= i %>">
            </div>
          <% } %>
        </div>
        <div class="w-full flex justify-center mb-2">
          <div class="rounded-lg bg-blue-400 px-4 text-center py-1 font-bold cursor-pointer" id="copy-score-button" onclick="copyScore()">
            copy score
          </div>
        </div>
        <div class="w-full flex flex-col items-center justify-center">
          <div class="font-bold text-2xl" id="next-puzzle-timer"></div>
          <div class="font-semibold">until next puzzle</div>
        </div>
        <div class="flex flex-row mt-2 w-full gap-4">
          <div class="w-1/2">
            <div class="rounded-lg bg-slate-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closeRecapPopup()">
              close
            </div>
          </div>
          <div class="w-1/2">
            <a href="/stats">
              <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer">
                view stats
              </div>
            </a>
          </div>
        </div>
      </div>
    </div>
    <script>
      const puzzle = <%- JSON.stringify(puzzle) %>
      const PUZZLES_GRID = [[0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5]]
      let indexSelected = undefined
      let currListener = undefined

      let copyString = ""

      let popupShowing = false
      function convertClueToText(clue) {
        // whats a switch statement omegadance
        if (clue[0] === 'team') {
          return `has played for ${clue[1].substring(clue[1].indexOf('/') + 1)}`
        }
        else if (clue[0] === 'country') {
          return `is from ${clue[1]}`
        }
        else if (clue[0] === 'age') {
          return `is older than ${clue[1]} years old`
        }
        else if (clue[0] === 'rating2') {
          return `has a career rating 2.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'rating1') {
          return `has a career rating 1.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'KDDiff') {
          return `has a career K/D difference of over ${clue[1]}`
        }
        else if (clue[0] === 'maps') {
          return `has played over ${clue[1]} maps in their career`
        }
        else if (clue[0] === 'rounds') {
          return `has played over ${clue[1]} rounds in their career`
        }
        else if (clue[0] === 'KDRatio') {
          return `has a career K/D ratio of over ${clue[1]}`
        }
        else if (clue[0] === 'HSRatio') {
          return `has a career headshot percentage of over ${clue[1]}%`
        }
        else if (clue[0] === 'ratingTop20') {
          return `has a rating 2.0 of over ${clue[1]} against top 20 teams in their career`
        }
        else if (clue[0] === 'clutchesTotal') {
          return `has over ${clue[1]} clutches in their career`
        }
        else if (clue[0] === 'majorsWon') {
          return `has won over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'majorsPlayed') {
          return `has played in over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'LANsWon') {
          return `has won over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'LANsPlayed') {
          return `has played in over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'top20s') {
          return `has been in the top 20 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'top10s') {
          return `has been in the top 10 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'ratingYear') {
          return `had over a rating 1.0 of ${clue[1][1]} in ${clue[1][0]}`
        }
        else if (clue[0] === 'topPlacement') {
          return `has been a top ${clue[1]} player in at least one year`
        }
        else {
          return `has over ${clue[1]} ${clue[0]} in their career`
        }
      }

      function formatPercentage(percent) {
        if (percent < 10) {
          return `${percent.toFixed(2)}%`
        }
        else if (percent < 100) {
          return `${percent.toFixed(1)}%`
        }
        else {
          return `${percent.toFixed(0)}%`
        }
      }

      function openHowToPlay() {
        document.getElementById('how-to-popup-bg').classList.remove('hidden')
      }

      function closeHowToPlay() {
        document.getElementById('how-to-popup-bg').classList.add('hidden')
      }

      function closePopup() {
        document.getElementById('player-popup-bg').classList.add('hidden')
        document.getElementById('player-popup-input').value = ''
        updatePlayerList()

        indexSelected = undefined
      }
      function openPopup(ind) {
        document.getElementById('player-popup-clue-1').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][0]])
        document.getElementById('player-popup-clue-2').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][1]])

        popupShowing = true
        document.getElementById('player-popup-bg').classList.remove('hidden')

        document.getElementById('player-popup-input').focus()

        indexSelected = ind
      }

      function openConcede() {
        document.getElementById('show-concede-button').classList.add('hidden')
        document.getElementById('confirm-concede-button').classList.remove('hidden')
      }

      async function confirmConcede() {
        const res = await (await fetch(`/concede`, {
          method: 'POST',
          credentials: 'include',
          headers: new Headers({
            'Content-Type': 'application/x-www-form-urlencoded'
          })
        })).json()

        // console.log(res)

        gameOverSequence(res)
      }

      function cancelConcede() {
        document.getElementById('show-concede-button').classList.remove('hidden')
        document.getElementById('confirm-concede-button').classList.add('hidden')
      }

      function openRecapPopup() {
        document.getElementById('recap-popup-bg').classList.remove('hidden')
      }
      function closeRecapPopup() {
        document.getElementById('recap-popup-bg').classList.add('hidden')
      }

      async function copyScore() {
        if (copyString === "") {
          // set copy string
          const score = document.getElementById('score-text').innerHTML.charAt(0)

          copyString += `CSGODOKU Puzzle ${puzzleStartDay} - ${score}/9\n\n`
          copyString += `${document.getElementById('uniqueness-text').innerHTML} Uniqueness Score`

          for (let i = 0; i < 9; i++) {
            if (i % 3 === 0) {
              copyString += '\n'
            }

            copyString += `${document.getElementById(`recap-grid-${i}`).classList.contains('bg-green-500') ? '🟩' : '⬜'}`
          }

          copyString += '\n\n'
          copyString += `https://csgodoku.onrender.com`
        }

        await navigator.clipboard.writeText(copyString)

        // change button text, add a listener to change it back
        document.getElementById('copy-score-button').innerHTML = 'copied!'
        document.getElementById('copy-score-button').onclick = undefined
        document.getElementById('copy-score-button').classList.remove('cursor-pointer')

        setTimeout(() => {
          document.getElementById('copy-score-button').innerHTML = 'copy score'
          document.getElementById('copy-score-button').onclick = copyScore
          document.getElementById('copy-score-button').classList.add('cursor-pointer')
        }, 2000)
      }

      function gameOverSequence(res) {
        document.getElementById('score-text').innerHTML = `${res.userScore[0]} / 9`
        document.getElementById('uniqueness-text').innerHTML = `${res.userScore[1]}`

        for (let i = 0; i < 9; i++) {
          document.getElementById(`grid-spot-${i}`).onclick = undefined
          document.getElementById(`grid-spot-${i}`).classList.remove('cursor-pointer', 'hover:bg-slate-600')
        }

        // show everything
        closePopup()
        document.getElementById('show-recap-button').classList.remove('hidden')
        openRecapPopup()

        cancelConcede()
        document.getElementById('show-concede-button').classList.add('hidden')
      }

      async function submitGuess(playerID) {
        if (indexSelected === undefined) {
          return
        }

        const ind = indexSelected

        const player = players[playerID]
        if (player === undefined) {
          return
        }

        if (player.guessed[ind]) {
          return
        }

        player.guessed[ind] = true

        const res = await (await fetch(`/insertGuess`, {
          method: 'POST',
          body: `guess=${playerID}&index=${ind}`,
          credentials: 'include',
          headers: new Headers({
            'Content-Type': 'application/x-www-form-urlencoded'
          })
        })).json()

        // console.log(res)

        document.getElementById('rounds-left').innerHTML = res.guessesLeft
        if (res.guessesLeft === 1) {
          document.getElementById('rounds-plural').innerHTML = ''
        }
        else {
          document.getElementById('rounds-plural').innerHTML = 's'
        }

        if (res.guessStatus === -1) {
          // error, do nothing
          return
        }
        else if (res.guessStatus === 0) {
          // incorrect
          document.getElementById(`player-popup-element-${player.id}`).classList.add('line-through', 'opacity-50')

          document.getElementById(`player-popup-select-${player.id}`).classList.remove('bg-blue-400', 'cursor-pointer')
          document.getElementById(`player-popup-select-${player.id}`).classList.add('bg-red-400')
          document.getElementById(`player-popup-select-${player.id}`).innerHTML = 'incorrect'
        }
        else if (res.guessStatus === 1) {
          // correct
          player.correct = true

          document.getElementById(`grid-spot-${ind}`).classList.remove('bg-slate-800', 'hover:bg-slate-600', 'cursor-pointer')
          document.getElementById(`grid-spot-${ind}`).classList.add('bg-slate-600')
          document.getElementById(`grid-spot-${ind}`).onclick = undefined

          document.getElementById(`grid-image-${ind}`).src = `/images/player/${player.id}.png`
          document.getElementById(`grid-name-${ind}`).innerHTML = player.name
          document.getElementById(`grid-percentage-${ind}`).innerHTML = formatPercentage(res.guessPercentage * 100)

          document.getElementById(`recap-grid-${ind}`).classList.add('bg-green-500')
          document.getElementById(`recap-grid-${ind}`).classList.remove('bg-gray-500')

          closePopup()
        }
        else {
          // ???
          return
        }

        if (res.guessesLeft === 0) {
          // game over sequence
          gameOverSequence(res)
        }
      }

      function updatePlayerList() {
        const ind = indexSelected

        const val = document.getElementById('player-popup-input').value.toLowerCase()
        document.getElementById('player-popup-list').innerHTML = ''

        if (val.length === 0) {
          return
        }
        else {
          filtered_players = Object.values(players).filter(player => {
            return player.name.toLowerCase().includes(val) || player.fullName.toLowerCase().includes(val)
          })

          filtered_players.map(player => {
            playerNameElement = document.createElement('div')
            playerNameElement.innerHTML = player.name
            playerNameElement.classList.add('font-bold', 'text-lg')

            playerFullNameElement = document.createElement('div')
            playerFullNameElement.innerHTML = player.fullName
            playerFullNameElement.classList.add('text-sm')

            playerElement = document.createElement('div')
            playerElement.classList.add('flex', 'flex-col', 'justify-center', 'flex-grow')
            if (player.guessed[ind] && !player.correct) {
              playerElement.classList.add('line-through', 'opacity-50')
            }
            playerElement.appendChild(playerNameElement)
            playerElement.appendChild(playerFullNameElement)
            playerElement.id = `player-popup-element-${player.id}`

            selectElement = document.createElement('div')
            if (player.correct) {
              selectElement.classList.add('rounded-lg', 'bg-green-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'picked'
            }
            else if (player.guessed[ind]) {
              selectElement.classList.add('rounded-lg', 'bg-red-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'incorrect'
            }
            else {
              selectElement.classList.add('rounded-lg', 'bg-blue-400', 'px-2', 'py-1', 'cursor-pointer', 'mr-2')
              selectElement.innerHTML = 'select'
              selectElement.onclick = function() {
                submitGuess(player.id)
              }
            }
            selectElement.id = `player-popup-select-${player.id}`

            playerElementWrapper = document.createElement('div')
            playerElementWrapper.classList.add('flex', 'flex-row', 'items-center', 'w-full', 'my-4')
            playerElementWrapper.appendChild(playerElement)
            playerElementWrapper.appendChild(selectElement)

            document.getElementById('player-popup-list').appendChild(playerElementWrapper)
          })

          return
        }
      }

      const players = <%- JSON.stringify(players) %>
      for (const id in players) {
        players[id].guessed = [false, false, false, false, false, false, false, false, false]
        players[id].correct = false
      }

      <% for (let i = 0; i < 9; i++) { %>
        <% for (let j = 0; j < currGame.guesses[i].length; j++) { %>
          players[<%= currGame.guesses[i][j] %>].guessed[<%= i %>] = true
        <% } %>
      <% } %>

      <% for (let i = 0; i < currGame.board.length; i++) { %>
        <% if (currGame.board[i] !== undefined && currGame.board[i] !== null) { %>
          players[<%= currGame.board[i] %>].correct = true
        <% } %>
      <% } %>

      <% if (currGame.guessesLeft <= 0) { %>
        openRecapPopup()
      <% } %>

      /* Timer Functions */
      const TIME_OFFSET = 1690855200
      const puzzleStartTime = <%= Math.floor(new Date(currGame.start).getTime() / 1000) %> - TIME_OFFSET
      const puzzleStartDay = Math.floor(puzzleStartTime / 86400)
      const nextPuzzleStartTime = (puzzleStartDay + 1) * 86400 + TIME_OFFSET

      function setTimer(diff) {
        const hours = Math.floor(diff / 3600)
        const minutes = Math.floor((diff % 3600) / 60)
        const seconds = diff % 60

        const hoursString = hours < 10 ? `0${hours}` : `${hours}`
        const minutesString = minutes < 10 ? `0${minutes}` : `${minutes}`
        const secondsString = seconds < 10 ? `0${seconds}` : `${seconds}`

        return `${hoursString}:${minutesString}:${secondsString}`
      }

      setInterval(function() {
        const currTime = Math.floor(new Date().getTime() / 1000)
        const diff = nextPuzzleStartTime - currTime
        if (diff <= 0) {
          location.reload()
        }
        else {
          document.getElementById('next-puzzle-timer').innerHTML = setTimer(diff)
        }
      }, 1000)

      const currTime = Math.floor(new Date().getTime() / 1000)
      const diff = nextPuzzleStartTime - currTime
      document.getElementById('next-puzzle-timer').innerHTML = setTimer(diff)
    </script>
  </body>
</html>
