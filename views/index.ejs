<!DOCTYPE html>
<html>
  <%- include('partials/helmet.ejs', {title: 'csgodoku'}) %>
  <body>
    <div class="w-full min-h-screen flex flex-col justify-center items-center bg-black">
      <div class="flex flex-row justify-center">
        <div class="flex flex-col">
          <div class="flex flex-row">
            <div class="h-36 w-36"></div>
            <% for (let i = 0; i < 3; i++) { %>
              <%- displayClue(puzzle[i]) %>
            <% } %>
          </div>
          <div class="flex flex-row">
            <div class="flex flex-col">
              <% for (let i = 3; i < 6; i++) { %>
                <%- displayClue(puzzle[i]) %>
              <% } %>
            </div>
            <div class="grid grid-cols-3 rounded-2xl border overflow-hidden">
              <% for (let i = 0; i < 9; i++) { %>
                <% if (currGame.board[i]) { %>
                  <div class="flex flex-col h-36 w-36 items-center justify-center border-white <%= getBorders(i) %> bg-slate-600 transition-colors" id="grid-spot-<%= i %>">
                    <%= players[currGame.board[i]].name %>
                  </div>
                <% } else { %>
                  <div class="flex flex-col h-36 w-36 items-center justify-center border-white <%= getBorders(i) %> cursor-pointer bg-slate-800 hover:bg-slate-600 transition-colors" onclick="openPopup(<%= i %>)" id="grid-spot-<%= i %>">
                  </div>
                <% } %>
              <% } %>
            </div>
          </div>
        </div>
        <div class="flex flex-col justify-center items-center text-2xl ml-6 text-white pt-36">
          <div>
            you have
          </div>
          <div class="text-6xl font-bold" id="rounds-left">
            <%= currGame.guessesLeft %>
          </div>
          <div>
            round<span id="rounds-plural"><% if (currGame.guessesLeft > 1) { %>s<% } %></span> left
          </div>
        </div>
      </div>
    </div>

    <div class="flex flex-col justify-center items-center absolute z-0 top-0 w-full min-h-screen hidden" id="player-popup-bg" >
      <div class="flex flex-col items-center justify-center p-4 w-96 z-10 bg-gray-400 rounded-xl" id="player-popup">
        <div class="text-center mb-4" id="player-popup-text">
          enter a player who <span class="font-bold" id="player-popup-clue-1"></span> and <span class="font-bold" id="player-popup-clue-2"></span>
        </div>
        <div class="w-80">
          <input type="text" placeholder="enter a player" class="w-80 px-2 py-1.5 rounded-lg" oninput="updatePlayerList()" id="player-popup-input">
        </div>
        <div class="w-80 h-128 overflow-y-auto my-2" id="player-popup-list">

        </div>
        <div class="mt-4 w-80">
          <div class="rounded-lg bg-blue-500 w-full text-center py-2 font-bold cursor-pointer" onclick="closePopup()">
            close
          </div>
        </div>
      </div>
    </div>
    <script>
      const puzzle = <%- JSON.stringify(puzzle) %>
      const PUZZLES_GRID = [[0, 3], [1, 3], [2, 3], [0, 4], [1, 4], [2, 4], [0, 5], [1, 5], [2, 5]]
      let indexSelected = undefined

      let popupShowing = false
      function convertClueToText(clue) {
        // whats a switch statement omegadance
        if (clue[0] === 'team') {
          return `has played for ${clue[1].substring(clue[1].indexOf('/') + 1)}`
        }
        else if (clue[0] === 'country') {
          return `is from ${clue[1]}`
        }
        else if (clue[0] === 'age') {
          return `is older than ${clue[1]} years old`
        }
        else if (clue[0] === 'rating2') {
          return `has a career rating 2.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'rating1') {
          return `has a career rating 1.0 of over ${clue[1]}`
        }
        else if (clue[0] === 'KDDiff') {
          return `has a career K/D difference of over ${clue[1]}`
        }
        else if (clue[0] === 'maps') {
          return `has played over ${clue[1]} maps in their career`
        }
        else if (clue[0] === 'rounds') {
          return `has played over ${clue[1]} rounds in their career`
        }
        else if (clue[0] === 'KDRatio') {
          return `has a career K/D ratio of over ${clue[1]}`
        }
        else if (clue[0] === 'HSRatio') {
          return `has a career headshot percentage of over ${clue[1]}%`
        }
        else if (clue[0] === 'ratingTop20') {
          return `has a rating 2.0 of over ${clue[1]} against top 20 teams in their career`
        }
        else if (clue[0] === 'clutchesTotal') {
          return `has over ${clue[1]} clutches in their career`
        }
        else if (clue[0] === 'majorsWon') {
          return `has won over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'majorsPlayed') {
          return `has played in over ${clue[1]} majors in their career`
        }
        else if (clue[0] === 'LANsWon') {
          return `has won over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'LANsPlayed') {
          return `has played in over ${clue[1]} LANs in their career`
        }
        else if (clue[0] === 'top20s') {
          return `has been in the top 20 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'top10s') {
          return `has been in the top 10 players of the year over ${clue[1]} times in their career`
        }
        else if (clue[0] === 'ratingYear') {
          return `had over a rating 1.0 of ${clue[1][1]} in ${clue[1][0]}`
        }
        else if (clue[0] === 'topPlacement') {
          return `has been a top ${clue[1]} player in at least one year`
        }
        else {
          return `has over ${clue[1]} ${clue[0]} in their career`
        }
      }

      function closePopup() {
        popupShowing = false
        document.getElementById('player-popup-bg').classList.add('hidden')
        document.getElementById('player-popup-input').value = ''
        updatePlayerList()

        indexSelected = undefined
      }
      function openPopup(ind) {
        document.getElementById('player-popup-clue-1').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][0]])
        document.getElementById('player-popup-clue-2').innerHTML = convertClueToText(puzzle[PUZZLES_GRID[ind][1]])

        popupShowing = true
        document.getElementById('player-popup-bg').classList.remove('hidden')

        indexSelected = ind
      }

      // window.addEventListener('click', function(e) {
      //   if (popupShowing && !document.getElementById('player-popup').contains(e.target)) {
      //     closePopup()
      //   }
      // })

      async function submitGuess(playerID) {
        if (indexSelected === undefined) {
          return
        }

        const ind = indexSelected

        const player = players[playerID]
        if (player === undefined) {
          return
        }

        if (player.guessed[ind]) {
          return
        }

        player.guessed[ind] = true

        const res = await (await fetch(`/insertGuess`, {
          method: 'POST',
          body: `guess=${playerID}&index=${ind}`,
          credentials: 'include',
          headers: new Headers({
            'Content-Type': 'application/x-www-form-urlencoded'
          })
        })).json()

        console.log(res)

        document.getElementById('rounds-left').innerHTML = res.guessesLeft
        if (res.guessesLeft === 1) {
          document.getElementById('rounds-plural').innerHTML = ''
        }

        if (res.guessStatus === -1) {
          // error, do nothing
          return
        }
        else if (res.guessStatus === 0) {
          // incorrect
          document.getElementById(`player-popup-element-${player.id}`).classList.add('line-through', 'opacity-50')

          document.getElementById(`player-popup-select-${player.id}`).classList.remove('bg-blue-400', 'cursor-pointer')
          document.getElementById(`player-popup-select-${player.id}`).classList.add('bg-red-400')
          document.getElementById(`player-popup-select-${player.id}`).innerHTML = 'incorrect'
        }
        else if (res.guessStatus === 1) {
          // correct
          player.correct = true

          document.getElementById(`grid-spot-${ind}`).classList.remove('bg-slate-800', 'hover:bg-slate-600', 'cursor-pointer')
          document.getElementById(`grid-spot-${ind}`).classList.add('bg-slate-600')
          document.getElementById(`grid-spot-${ind}`).onclick = undefined

          document.getElementById(`grid-spot-${ind}`).innerHTML = player.name

          closePopup()
        }
      }

      function updatePlayerList() {
        const ind = indexSelected

        const val = document.getElementById('player-popup-input').value.toLowerCase()
        document.getElementById('player-popup-list').innerHTML = ''

        if (val.length === 0) {
          return
        }
        else {
          filtered_players = Object.values(players).filter(player => {
            return player.name.toLowerCase().includes(val) || player.fullName.toLowerCase().includes(val)
          })

          filtered_players.map(player => {
            playerNameElement = document.createElement('div')
            playerNameElement.innerHTML = player.name
            playerNameElement.classList.add('font-bold', 'text-lg')

            playerFullNameElement = document.createElement('div')
            playerFullNameElement.innerHTML = player.fullName
            playerFullNameElement.classList.add('text-sm')

            playerElement = document.createElement('div')
            playerElement.classList.add('flex', 'flex-col', 'justify-center', 'flex-grow')
            if (player.guessed[ind] && !player.correct) {
              playerElement.classList.add('line-through', 'opacity-50')
            }
            playerElement.appendChild(playerNameElement)
            playerElement.appendChild(playerFullNameElement)
            playerElement.id = `player-popup-element-${player.id}`

            selectElement = document.createElement('div')
            if (player.correct) {
              selectElement.classList.add('rounded-lg', 'bg-green-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'picked'
            }
            else if (player.guessed[ind]) {
              selectElement.classList.add('rounded-lg', 'bg-red-400', 'px-2', 'py-1', 'mr-2')
              selectElement.innerHTML = 'incorrect'
            }
            else {
              selectElement.classList.add('rounded-lg', 'bg-blue-400', 'px-2', 'py-1', 'cursor-pointer', 'mr-2')
              selectElement.innerHTML = 'select'
            }
            selectElement.id = `player-popup-select-${player.id}`
            selectElement.onclick = function() {
              submitGuess(player.id)
            }

            playerElementWrapper = document.createElement('div')
            playerElementWrapper.classList.add('flex', 'flex-row', 'items-center', 'w-full', 'my-4')
            playerElementWrapper.appendChild(playerElement)
            playerElementWrapper.appendChild(selectElement)

            document.getElementById('player-popup-list').appendChild(playerElementWrapper)
          })

          return
        }
      }

      const players = <%- JSON.stringify(players) %>
      for (const id in players) {
        players[id].guessed = [false, false, false, false, false, false, false, false, false]
        players[id].correct = false
      }

      <% for (let i = 0; i < 9; i++) { %>
        <% for (let j = 0; j < currGame.guesses[i].length; j++) { %>
          players[<%= currGame.guesses[i][j] %>].guessed[<%= i %>] = true
        <% } %>
      <% } %>

      <% for (let i = 0; i < currGame.board.length; i++) { %>
        <% if (currGame.board[i] !== undefined && currGame.board[i] !== null) { %>
          players[<%= currGame.board[i] %>].correct = true
        <% } %>
      <% } %>
    </script>
  </body>
</html>
